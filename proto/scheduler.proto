syntax = "proto3";

import "trigger.proto";

package scheduler_proto;

service Scheduler {
  /// Install or update a trigger onto the scheduler
  rpc InstallTrigger (InstallTriggerRequest)  returns (InstallTriggerResponse);
  /// Manually run a trigger
  rpc ExecuteTrigger (ExecuteTriggerRequest)  returns (ExecuteTriggerResponse);
  /// Get a trigger by id
  rpc GetTrigger (GetTriggerRequest)  returns (GetTriggerResponse);
  /// Retrieve a trigger by token
  rpc FindTriggers (FindTriggersRequest)  returns (FindTriggersResponse);
}

message InstallTrigger {
  string owner_id = 1;
  uint64 cell_id = 2;
  /// [Future] User supplied identifier, unique per owner account
  optional string reference_id = 3;
  optional string name = 4;
  optional string description = 5;
  // TODO: Explore having multiple endpoints with independent status
  trigger_proto.Emit emit = 7;
  trigger_proto.Payload payload = 8;
  trigger_proto.Schedule schedule = 9;
  //trigger_proto.EventRetryPolicy event_retry_policy = 10;
  //OnStatusHandler on_success = 12;
  //OnStatusHandler on_failure = 13;
}

// == INSTALL OR UPDATE EXISTING TRIGGER ==
message InstallTriggerRequest {
  InstallTrigger install_trigger = 1;
}

message InstallTriggerResponse {
  trigger_proto.Trigger trigger = 1;
}

// == EXECUTE TRIGGER MANUALLY ==
message ExecuteTriggerRequest {
}

message ExecuteTriggerResponse {
}

// == GET TRIGGER ==
message GetTriggerRequest {
  string id = 1;
}

message GetTriggerResponse {
  trigger_proto.Trigger trigger = 1;
}

// == Find TRIGGERS ==
message FindTriggersRequest {
}
message FindTriggersResponse {
}
