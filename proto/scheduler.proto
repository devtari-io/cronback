syntax = "proto3";

import "trigger.proto";
import "invocation.proto";

package scheduler_proto;

service Scheduler {
  /// Install or update a trigger onto the scheduler
  rpc InstallTrigger (InstallTriggerRequest)  returns (InstallTriggerResponse);
  /// Manually run a trigger
  rpc InvokeTrigger (InvokeTriggerRequest)  returns (InvokeTriggerResponse);
  /// Get a trigger by id
  rpc GetTrigger (GetTriggerRequest)  returns (GetTriggerResponse);
  /// Find a list of triggers by condition
  rpc FindTriggers (FindTriggersRequest)  returns (FindTriggersResponse);
  /// Retrieve a list of triggers 
  rpc ListTriggers (ListTriggersRequest)  returns (ListTriggersResponse);
  /// Pause a running trigger
  rpc PauseTrigger (PauseTriggerRequest)  returns (PauseTriggerResponse);
  /// Resume a paused/active trigger
  rpc ResumeTrigger (ResumeTriggerRequest)  returns (ResumeTriggerResponse);
  /// Cancel trigger
  rpc CancelTrigger (CancelTriggerRequest)  returns (CancelTriggerResponse);
}

enum InvocationMode {
  InvocationMode_UNKNOWN = 0;
  ASYNC = 1;
  SYNC = 2;
}

message InstallTriggerRequest {
  // Id is only set if we are updating an existing trigger and we know the id up front
  optional string id = 1;
  bool fail_if_exists = 2;
  string project_id = 3;
  string name = 4;
  /// [Future] User supplied identifier, unique per owner account
  optional string reference = 5;
  optional string description = 6;
  repeated trigger_proto.Emit emit = 7;
  optional trigger_proto.Payload payload = 8;
  trigger_proto.Schedule schedule = 9;
}

// == INSTALL OR UPDATE EXISTING TRIGGER ==
message InstallTriggerResponse {
  trigger_proto.Trigger trigger = 1;
  bool already_existed = 2;
}

// PAUSE TRIGGER
message PauseTriggerRequest {
  string id = 1;
  string project_id = 2;
}

message PauseTriggerResponse {
  trigger_proto.TriggerManifest trigger = 1;
}

// RESUME TRIGGER
message ResumeTriggerRequest {
  string id = 1;
  string project_id = 2;
}

message ResumeTriggerResponse {
  trigger_proto.TriggerManifest trigger = 1;
}

// CANCEL TRIGGER
message CancelTriggerRequest {
  string id = 1;
  string project_id = 2;
}

message CancelTriggerResponse {
  trigger_proto.TriggerManifest trigger = 1;
}


// == EXECUTE TRIGGER MANUALLY ==
message InvokeTriggerRequest {
  string id = 1;
  string project_id = 2;
  InvocationMode mode = 3;

}

message InvokeTriggerResponse {
  invocation_proto.Invocation invocation = 1;
}

// == GET TRIGGER ==
message GetTriggerRequest {
  string id = 1;
  string project_id = 2;
}

message GetTriggerResponse {
  trigger_proto.Trigger trigger = 1;
}

// == Find TRIGGERS ==
message FindTriggersRequest {
}
message FindTriggersResponse {
}

// == LIST TRIGGER ==

// The returned triggers must match the "set" fields in this object
message ListTriggersFilter {
  optional string reference = 1;
  repeated trigger_proto.TriggerStatus statuses = 2;
}

message ListTriggersRequest {
  string project_id = 1;
  uint64 limit = 2;
  optional string before = 3;
  optional string after = 4;
  ListTriggersFilter filter = 5;
}

message ListTriggersResponse {
  repeated trigger_proto.TriggerManifest triggers = 1;
}
