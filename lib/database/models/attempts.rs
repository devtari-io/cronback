//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use std::time::Duration;

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use sea_orm::{DeriveActiveEnum, EnumIter, FromJsonQueryResult};
use serde::{Deserialize, Serialize};

use crate::database::pagination::PaginatedEntity;
use crate::model::ValidShardedId;
use crate::types::{AttemptLogId, ProjectId, RunId, TriggerId};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "attempts"
    }
}

// TODO: Remove serde and implement an API model instead.
#[derive(
    Clone, Debug, Serialize, PartialEq, DeriveModel, DeriveActiveModel, Eq,
)]
pub struct Model {
    pub id: AttemptLogId,
    pub run_id: RunId,
    pub trigger_id: TriggerId,
    pub project_id: ValidShardedId<ProjectId>,
    pub status: AttemptStatus,
    pub details: AttemptDetails,
    pub created_at: DateTime<Utc>,
}

impl PaginatedEntity for Entity {
    fn cursor_column() -> Self::Column {
        Column::Id
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    RunId,
    TriggerId,
    ProjectId,
    Status,
    Details,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
    ProjectId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = (String, String);

    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;

    fn def(&self) -> ColumnDef {
        match self {
            | Self::Id => ColumnType::String(None).def(),
            | Self::RunId => ColumnType::String(None).def(),
            | Self::TriggerId => ColumnType::String(None).def(),
            | Self::ProjectId => ColumnType::String(None).def(),
            | Self::Status => ColumnType::String(None).def(),
            | Self::Details => ColumnType::Json.def(),
            | Self::CreatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct WebhookAttemptDetails {
    pub response_code: Option<i32>,
    pub response_latency_s: Duration,
    pub error_message: Option<String>,
}

impl WebhookAttemptDetails {
    pub fn is_success(&self) -> bool {
        (200..=299).contains(&self.response_code.unwrap_or(500))
    }

    pub fn with_error(err: String) -> Self {
        Self {
            response_code: None,
            response_latency_s: Duration::default(),
            error_message: Some(err),
        }
    }
}

#[derive(
    Debug, Clone, Serialize, Deserialize, PartialEq, Eq, FromJsonQueryResult,
)]
pub enum AttemptDetails {
    WebhookAttemptDetails(WebhookAttemptDetails),
}

#[derive(
    Debug, Serialize, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum,
)]
#[sea_orm(rs_type = "String", db_type = "String(None)")]
pub enum AttemptStatus {
    #[sea_orm(string_value = "Succeeded")]
    Succeeded,
    #[sea_orm(string_value = "Failed")]
    Failed,
}
